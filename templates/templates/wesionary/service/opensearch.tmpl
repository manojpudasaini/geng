package services

import (
	"context"
	"strings"

	"{{.ProjectModuleName}}/pkg/framework"

	opensearch "github.com/opensearch-project/opensearch-go/v2"
	opensearchapi "github.com/opensearch-project/opensearch-go/v2/opensearchapi"
)

type OpenSearchService struct {
	logger framework.Logger
	client *opensearch.Client
}

func NewOpenSearchService(
	logger framework.Logger,
	client *opensearch.Client,
) *OpenSearchService {
	return &OpenSearchService{
		logger: logger,
		client: client,
	}
}

func (oss *OpenSearchService) CreateIndex(
	indexName string,
) error {
	// TODO: make settings dynamic (as per suggestion from DevOps)
	settings := strings.NewReader(`{
    "settings": {
        "index": {
            "number_of_shards": 1,
            "number_of_replicas": 0
            }
        }
    }`)

	createIndex := opensearchapi.IndicesCreateRequest{
		Index: indexName,
		Body:  settings,
	}

	createIndexResponse, err := createIndex.Do(context.Background(), oss.client)

	if err != nil || createIndexResponse.IsError() {
		// handle error as per example here
		// https://github.com/opensearch-project/opensearch-go/blob/main/USER_GUIDE.md#example
		// once new version is released
		// for now ignore resource_already_exists_exception
		if createIndexResponse.StatusCode != 400 {
			oss.logger.Error("err creating index ==== ", err, createIndexResponse)
		}
	} else {
		oss.logger.Infof("\n\nindex %s created \n Response: %#v\n\n", indexName, createIndexResponse)
	}

	return err
}
